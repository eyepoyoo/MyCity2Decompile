FILES / FOLDERS
-----

WebGLPlayer.html - 

    An example of how to embed the game onto a web page. 
    This includes javascript functions for interacting with gohi ID and for returning the boot params used to define game data (described below)
	Unlike Unity Webplayer builds, Unity WebGl builds can not be run from file but must be hosted on a server to run. 
	The server hosting the files will need to be able to serve the ".data" and ".mem" files (ie it may need new MIME types adding). 
	
	Project Title:
	The displayes project title, for the webpage, the page tab and the embedded webGl player are set in the html file.
	The three locations the html file has the text "Default Project Title" can be replaced with what you want to be displayed instead. 
	
	Template parameters:
	You can create and define a template/style for the webpage if you like which determines the webpage appearance and behaviour while the game is loading as well as loading bar functionality.
	For details on how to do this please refer to the Unity documentation here:
		http://docs.unity3d.mun/Manual/webgl-templates.html
	The supplied html uses the basic Unity default template, all of the example assets for this are located in the folder "Template Data"
	Any scripts needed for controlling the loading bar are also included in the html file, the example includes:
		<script src="Release/UnityLoader.js"></script>
	
	Boot params:
	The WebGl game has the abbility to be supplied with boot params to define various in game elements, most notable the localisation language to use. 
	Boot params are in the form of an array of Key/Value pairs defined by the param:
	var data = { "key1" : "value1", "key2" : "value2" };
	
	Module Parameter:
	This parameter defines data tha the web page needs to know. 
		TOTAL_MEMORY: 536870912 - sets the memory alloaction given to the game by the browser, this value can be changed but should not be lower than the supplied value. 
		dataUrl, codeUrl and memUrl - defines the locations of the build files, these urls are relative paths, but you may want to change them to be absolute addresses which will only be known when the files are hosted. 

WebGLPlayer_gohiID.html - 

    Also an example of how to embed the game onto a web page, same as WebGLPlayer.html but with added lego id functionality
	
**/.htaccess - 

	This file is a directory level configuration file. Unity WebGl builds supply compressed data, this .htaccess file tells the browser which compressed file to look for when requesting uncompressed file names 
	and addes the encodings needed to decompress the files. 
	
Release Folder - 
	This folder contains the actualy game build data in compressed format. 

Streaming Assets Folder - 
	If the project has streaming assets, for example videos, fallback configs or cutscenes, there will be a streaming assets folder with these assets supplied. This folder must be kept at the same releative path to the Release Folder. 

Every other game asset and all code is internally built into to the game file.



LOCALISATION
------------

The localisation table is built into the game istelf, it is not externally hosted or defined. 
The language code is passed in as a key/value pair boot param from the html file described above in the html file section. 

An example of how this can be used is:
	var data = { "lang" : "EN" };

The list of possible languages is:
	CS|DA|DE|EN|ES|FI|FR|HU|IT|JA|KO|NL|NB|PL|RU|SV|ZH


CALL TO ACTION SCREEN
------------

This demo can show a call to action screen for EITHER gohi website or mobile store links. 

Which is shown is defined using a boot parameter in the same fashion as the localisation. 

the key to define is "platform"
the possible values are "WEB" or "MOBILE"

for example
var data = { "lang" : "EN", "platform" : "WEB" };
var data = { "lang" : "EN", "platform" : "MOBILE" };
